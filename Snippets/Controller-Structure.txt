"Controller-Structure":{
	"prefix": "controller-structure",
	"body":[
		"using Api.Controllers;",
		"using Api.Dtos;",
		"using AutoMapper;",
		"using Domain.Entities;",
		"using Domain.Interface;",
		"using Microsoft.AspNetCore.Mvc;",
		"",
		"namespace ApiIncidencias.Controllers;",
		"[ApiVersion(\"1.0\")]",
		"public class ${1:Entity}Controller : BaseApiController{",
		"    private readonly IUnitOfWork _UnitOfWork;",
		"    private readonly IMapper _Mapper;",
		"",
		"    public ${1:Entity}Controller (IUnitOfWork unitOfWork,IMapper mapper){",			
		"        _UnitOfWork = unitOfWork;",
		"        _Mapper = mapper;",
		"    }",
		"",
		"    [HttpGet]",
		"    //[Authorize]",
		"    [MapToApiVersion(\"1.0\")]",
		"    [ProducesResponseType(StatusCodes.Status200OK)]",
		"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"    public async Task<IEnumerable<${3:DtoEntity}>> Get(){",			
		"       var records = await _UnitOfWork.${2:Entities}.Find();",
		"       return _Mapper.Map<List<${3:DtoEntity}>>(records);",
		"    }",
		"",
		"    [HttpGet(\"{id}\")]",
		"    //[Authorize]",
		"    [MapToApiVersion(\"1.0\")]",
		"    [ProducesResponseType(StatusCodes.Status200OK)]",
		"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"    public async Task<ActionResult<${3:DtoEntity}>> Get(${4:TypeId} id){",			                
		"       var record = await _UnitOfWork.${2:Entities}.FindBy${7:TypeIdCapitalize}Id(id);",
		"       if (record == null){",
		"           return NotFound();",
		"       }",
		"       return _Mapper.Map<${3:DtoEntity}>(record);",
		"    }",
		"",
		"    [HttpPost]",
		"    [ProducesResponseType(StatusCodes.Status201Created)]",
		"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"    public async Task<ActionResult<${3:DtoEntity}>> Post(${3:DtoEntity} recordDto){",
		"       var record = _Mapper.Map<${8:Entity}>(recordDto);",
		"       _UnitOfWork.${2:Entities}.Add(record);",
		"       await _UnitOfWork.SaveChanges();",
		"       if (record == null){",			
		"           return BadRequest();",
		"       }",			
		"       return CreatedAtAction(nameof(Post),new {id= record.${9:EntityId}, recordDto});",
		"    }",
		"",
		"    [HttpPut]",
		"    [MapToApiVersion(\"1.0\")]",
		"    [ProducesResponseType(StatusCodes.Status200OK)]",
		"    [ProducesResponseType(StatusCodes.Status404NotFound)]",
		"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"    public async Task<ActionResult<${3:DtoEntity}>> Put([FromBody]${3:DtoEntity}? recordDto){",
		"       if(recordDto == null)",
		"           return NotFound();",
		"       var record = _Mapper.Map<${8:Entity}>(recordDto);",
		"       _UnitOfWork.${2:Entities}.Update(record);",
		"       await _UnitOfWork.SaveChanges();",
		"       return recordDto;",
		"    }",
		"",
		"    [HttpDelete(\"{id}\")]",
		"    [MapToApiVersion(\"1.0\")]",
		"    [ProducesResponseType(StatusCodes.Status204NoContent)]",
		"    [ProducesResponseType(StatusCodes.Status404NotFound)]",
		"    public async Task<IActionResult> Delete(${4:TypeId} id){",
		"       var record = await _UnitOfWork.${2:Entities}.FindBy${7:TypeIdCapitalize}Id(id);",
		"       if(record == null){",
		"           return NotFound();",
		"       }",
		"       _UnitOfWork.${2:Entities}.Remove(record);",
		"       await _UnitOfWork.SaveChanges();",
		"       return NoContent();",
		"    }",
		"}",
	],
	"description": "create the basic structure to create a controller"
}